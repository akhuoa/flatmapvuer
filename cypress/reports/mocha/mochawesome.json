{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-13T22:52:18.429Z",
    "end": "2024-03-13T22:52:24.462Z",
    "duration": 6033,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6adc0793-2482-49f9-b8d5-59e0ed2d512d",
      "title": "",
      "fullFile": "cypress/component/MultiFlatmapVuer.cy.js",
      "file": "cypress/component/MultiFlatmapVuer.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f6ee015c-a974-4785-ba64-d92bb92508e1",
          "title": "MultiFlatmapVuer",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Workflow testing",
              "fullTitle": "MultiFlatmapVuer Workflow testing",
              "timedOut": null,
              "duration": 5978,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const readySpy = cy.spy().as('readySpy')\n    // const resourceSelectedSpy = cy.spy().as('resourceSelectedSpy')\n    cy.get('@props').then((props) => {\n      console.log('flatmapAPI', props)\n      cy.mount(CypressComponentWrapper, {\n        propsData: {\n          component: 'MultiFlatmapVuer',\n          props: props,\n          events: {\n            ready: readySpy\n          }\n        }\n      }).then((vm) => {\n        cy.wrap(vm).as('vm')\n        window.vm = vm\n      }).get('@vue').should('exist')\n      // Now that we have the vue wrapper, check that the ready event is fired\n      .then(() => {\n        cy.get('@vue').should(wrapper => {\n          expect(wrapper.emitted('ready')).to.be.ok\n          Cypress.multiFlatmapVuerWrapper = wrapper\n        })\n      })\n    })\n    Cypress.on('uncaught:exception', (err) => {\n      // returning false here prevents Cypress from\n      // failing the test\n      if (err.message.includes(\"this.facets.at is not a function\"))\n        return false\n      return true\n    })\n    //Check if multiflatmap is mounted correctly\n    cy.get('.content-container').should('exist');\n        \n    //Check if the minimap is visible\n    cy.get('#maplibre-minimap > .maplibregl-canvas-container > .maplibregl-canvas').should('exist');\n    //Check if the ready event is fired\n    // *** Commenting this out until we can figure out why it's not working\n    // cy.get('@readySpy').should('have.been.calledWith', true)\n    // Check if flatmap emits ready event\n    cy.get('@vue').should(wrapper => {\n      expect(wrapper.emitted('ready')).to.be.ok\n    }).then(() => {\n      // Create a pop up and ensure it shows\n      let mapImp = window.Cypress.multiFlatmapVuer.getCurrentFlatmap()\n      console.log('flatmap', mapImp)\n      mapImp.showPopup(45,'Test', { className: 'flatmapvuer-popover', positionAtLastClick: true })\n      cy.get('.flatmapvuer-popover').should('exist').contains('Test').then(() => {\n        // Close the pop up\n        cy.get('.maplibregl-popup-close-button').click();\n        cy.get('.flatmapvuer-popover').should('not.exist');\n      // Check the metadata for path exploration is loading correctly\n      }).then(() => {\n        let flatmapVuer = window.Cypress.flatmapVuer\n        console.log('flatmapVuer', flatmapVuer)\n        let fmEventCallback = flatmapVuer.eventCallback()\n        fmEventCallback('click', {\n          \"id\": \"ilxtr_neuron-type-keast-4\",\n          \"featureId\": 28,\n          \"kind\": \"symp-post\",\n          \"label\": \"sympathetic chain ganglion neuron (kblad)\",\n          \"models\": \"ilxtr:neuron-type-keast-4\",\n          \"source\": \"https://apinatomy.org/uris/models/keast-bladder\",\n          \"taxons\": \"[\\\"NCBITaxon:10116\\\"]\",\n          \"type\": \"feature\",\n          \"mapUUID\": \"dbd2fe65-ef1e-5fd1-8614-e26498d00ffb\"\n        }, [])\n        // Check the pop up has the same information as when the test was created\n        cy.get('.subtitle').should('exist').contains('Observed in Rattus norvegicus species')\n        cy.get('[origin-item-label=\"Twelfth thoracic ganglion\"]').should('exist')\n        cy.get('[component-item-label=\"connective tissue, neck of urinary bladder\"]').should('exist')\n        cy.get('[destination-item-label=\"wall of blood vessel, Arteriole in connective tissue of bladder dome\"]').should('exist')\n        cy.get('.flatmapvuer-popover').should('exist').contains('Sympathetic chain ganglion neuron (kblad)').then(() => {\n          // Set the tooltip to be visible (this is needed as the css hack does not work in testing for some reason)\n          document.querySelector('#tooltip-container').style.display = 'block'\n          cy.get('#tooltip-container').invoke('css', 'display').then((display) => {\n            expect(display).to.equal('block')\n          }).then(() => {\n            // Open the 'show more' section\n            cy.get('#show-path-info').should('exist').click()\n            // Click on the dendrites button\n            cy.get('#open-dendrites-button').should('exist').click()\n            // Check that the resource selected event is emitted\n            cy.get('@vue').should(wrapper => {\n              expect(wrapper.emitted('resource-selected')).to.be.ok\n            })\n            // create a single stub we will use\n            cy.window().then(win => {\n              cy.stub(win, 'open').as('Open')\n            })\n            \n            // Click the open pubmed button and check that the window.open call was intercepted\n            cy.get('#open-pubmed-button').should('exist').click()\n            cy.get('@Open').should('have.been.calledOnceWithExactly', 'https://pubmed.ncbi.nlm.nih.gov/?term=1358408%2C9622251%2C9442414%2C7174880', '_blank')            \n          })\n          \n          // Close the pop up\n          cy.get('.maplibregl-popup-close-button').should('exist')\n        \n        // Test the search\n        }).then(() => {\n          flatmapVuer.searchAndShowResult('body proper', 'body proper')\n          cy.get('.maplibregl-popup').should('exist').contains('body proper')\n        })\n      })\n    })",
              "err": {},
              "uuid": "f9c38c03-8559-4a5b-bd4e-6f191499377c",
              "parentUUID": "f6ee015c-a974-4785-ba64-d92bb92508e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f9c38c03-8559-4a5b-bd4e-6f191499377c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5978,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quiet": true,
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}